# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build and Publish

on: workflow_dispatch

jobs:
  build-native:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      working-directory: ${{ github.workspace }}/Native
      run: >
        cmake -B build
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DENET_SHARED=1
        -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
        -S .

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      working-directory: ${{ github.workspace }}/Native
      run: cmake --build build --config ${{ matrix.build_type }}

    - name: Install
      working-directory: ${{ github.workspace }}/Native
      run: cmake --install build --strip --prefix install

    - name: Pack
      shell: pwsh
      working-directory: ${{ github.workspace }}/Native
      run: Compress-Archive -Path install/* -DestinationPath build.zip

    - name: Upload Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        name: ${{ matrix.os }}.zip
        path: ${{ github.workspace }}/Native/build.zip

  build-managed:
    runs-on: ubuntu-latest
    needs: build-native

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
          
      - name: Restore dependencies
        run: dotnet restore

      - name: Download Windows Native
        uses: actions/download-artifact@v2.1.1
        with:
          name: windows-latest.zip
          path: ${{ github.workspace }}

      - name: Download Linux Native
        uses: actions/download-artifact@v2.1.1
        with:
          name: ubuntu-latest.zip
          path: ${{ github.workspace }}

      - name: Download MacOS Native
        uses: actions/download-artifact@v2.1.1
        with:
          name: macos-latest.zip
          path: ${{ github.workspace }}

      - name: Extract Artifacts
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: 
          Get-ChildItem -Path ${{ github.workspace }};
          Expand-Archive -Path windows-latest.zip -DestinationPath windows-latest;
          Expand-Archive -Path ubuntu-latest.zip -DestinationPath ubuntu-latest;
          Expand-Archive -Path macos-latest.zip -DestinationPath macos-latest;

      - name: Setup Runtimes Folder
        shell: bash
        run:
          mkdir -p ./runtimes/osx/native;
          mkdir -p ./runtimes/linux/native;
          mkdir -p ./runtimes/windows/native;
          cp ./macos-latest/lib/* ./runtimes/osx/native;
          cp ./ubuntu-latest/lib/* ./runtimes/linux/native;
          cp ./windows-latest/lib/* ./runtimes/windows/native;
      
      - name: Build
        run: dotnet build --no-restore
      
      - name: Pack
        run: dotnet pack -c Release

      - name: Upload Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: Celnet.ENet.nupkg
          path: ${{ github.workspace }}/Release/*nupkg
